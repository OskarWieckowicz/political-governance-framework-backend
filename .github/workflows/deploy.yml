name: Deploy to Amazon ECS

on:
  push:
    tags:
      - '*'

env:
  AWS_REGION: eu-north-1
  ECR_KEYCLOAK_REPOSITORY: keycloak
  ECR_SPRING_REPOSITORY: pgf-spring
  ECS_KEYCLOAK_SERVICE: keycloak-service
  ECS_SPRING_SERVICE: spring-service
  ECS_CLUSTER: pgf
  ECS_KEYCLOAK_TASK_DEFINITION: keycloak-task-definition.json
  ECS_SPRING_TASK_DEFINITION: spring-task-definition.json
  KEYCLOAK_CONTAINER_NAME: keycloak-container
  SPRING_CONTAINER_NAME: pgf-spring-container

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy keycloak
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_KEYCLOAK_REPOSITORY:$IMAGE_TAG -f Dockerfile-keycloak .
          docker push $ECR_REGISTRY/$ECR_KEYCLOAK_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_KEYCLOAK_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_KEYCLOAK_TASK_DEFINITION }}
          container-name: ${{ env.KEYCLOAK_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_KEYCLOAK_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  deploy-spring:
    name: Deploy spring
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Tests
        run: mvn test

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_SPRING_REPOSITORY:$IMAGE_TAG --build-arg ACCESS_ARG=${{ secrets.AWS_ACCESS_KEY_ID }} --build-arg SECRET_ARG=${{ secrets.AWS_SECRET_ACCESS_KEY }} --build-arg BUCKET_ARG=${{ secrets.AWS_S3_BUCKET_NAME }} -f Dockerfile-springboot .
          docker push $ECR_REGISTRY/$ECR_SPRING_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_SPRING_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_SPRING_TASK_DEFINITION }}
          container-name: ${{ env.SPRING_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SPRING_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
